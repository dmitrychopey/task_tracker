require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TasksController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.

   before(:each) do   
      user = FactoryGirl.create(:user)
      user.add_role "superadmin"
      sign_in user        

    
  end

  let(:valid_attributes) {
    FactoryGirl.attributes_for(:task)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:task, title: nil)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all tasks as @tasks" do
     task = FactoryGirl.create(:task)
      get :index, {project_id: 1}, valid_session
      expect(assigns(:tasks)).to eq([task])
    end
  end

  describe "GET #show" do
    it "assigns the requested task as @task" do
      task = FactoryGirl.create(:task)
      project = FactoryGirl.create(:project)
      get :show, {:project_id => project.to_param, :id => task.to_param}, valid_session
      expect(assigns(:task)).to eq(task)
    end
  end

  describe "GET #new" do
    it "assigns a new task as @task" do
       project = FactoryGirl.create(:project)
      get :new, {:project_id => project.to_param}, valid_session
      expect(assigns(:task)).to be_a_new(Task)
    end
  end

  describe "GET #edit" do
    it "assigns the requested task as @task" do
      task = FactoryGirl.create(:task)
        project = FactoryGirl.create(:project)
      get :edit, {:project_id => project.to_param, :id => task.to_param}, valid_session
      expect(assigns(:task)).to eq(task)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Task" do
          project = FactoryGirl.create(:project)
        expect {
          post :create, {:project_id => project.to_param, :task => valid_attributes}, valid_session
        }.to change(Task, :count).by(1)
      end

      it "assigns a newly created task as @task" do
         project = FactoryGirl.create(:project)
        post :create, {:project_id => project.to_param, :task => valid_attributes}, valid_session
        expect(assigns(:task)).to be_a(Task)
        expect(assigns(:task)).to be_persisted
      end

      it "redirects to the created task" do
         project = FactoryGirl.create(:project)
        post :create, {:project_id => project.to_param, :task => valid_attributes}, valid_session
        expect(response).to redirect_to(project_task_path(project,Task.last))
      end
    end

    context "with invalid params" do
      render_views
      it "assigns a newly created but unsaved task as @task" do
         project = FactoryGirl.create(:project)
        post :create, {:project_id => project.to_param, :task => invalid_attributes}, valid_session
        expect(assigns(:task)).to be_a_new(Task)
      end

      it "re-renders the 'new' template" do
         project = FactoryGirl.create(:project)
        post :create, {:project_id => project.to_param, :task => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do

      let(:new_attributes) {
       FactoryGirl.attributes_for(:task, title: Faker::App.name)
      }

      it "updates the requested task" do
          project = FactoryGirl.create(:project)
       task = FactoryGirl.create(:task)
        put :update, {:project_id => project.to_param, :id => task.to_param, :task => new_attributes}, valid_session
        task.reload       
      end

      it "assigns the requested task as @task" do
          project = FactoryGirl.create(:project)
       task = FactoryGirl.create(:task)
        put :update, {:project_id => project.to_param, :id => task.to_param, :task => valid_attributes}, valid_session
        expect(assigns(:task)).to eq(task)
      end

      it "redirects to the task" do
          project = FactoryGirl.create(:project)
       task = FactoryGirl.create(:task)
        put :update, {:project_id => project.to_param, :id => task.to_param, :task => valid_attributes}, valid_session
        expect(response).to redirect_to(project_task_path(project,Task.last))
      end
    end

    context "with invalid params" do
      it "assigns the task as @task" do
          project = FactoryGirl.create(:project)
        task = FactoryGirl.create(:task)
        put :update, {:project_id => project.to_param, :id => task.to_param, :task => invalid_attributes}, valid_session
        expect(assigns(:task)).to eq(task)
      end

      it "re-renders the 'edit' template" do
          project = FactoryGirl.create(:project)
        task = FactoryGirl.create(:task)
        put :update, {:project_id => project.to_param, :id => task.to_param, :task => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested task" do
        project = FactoryGirl.create(:project)
      task = FactoryGirl.create(:task)
      expect {
        delete :destroy, {:project_id => project.to_param,:id => task.to_param}, valid_session
      }.to change(Task, :count).by(-1)
    end

    it "redirects to the project tasks list" do
        project = FactoryGirl.create(:project)
     task = FactoryGirl.create(:task)
      delete :destroy, {:project_id => project.to_param, :id => task.to_param}, valid_session
      expect(response).to redirect_to(project_path(project))
    end
  end

end
